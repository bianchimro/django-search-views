{
    "docs": [
        {
            "location": "/", 
            "text": "django-search-views\n\n\nThis package provides a Django class-based view used for showing a list of objects with a search form.\n\n\nThink of it as an extension of django's \ndjango.views.generic.list.ListView\n coupled with a \ndjango form\n, where the values of the form build a filter on the base queryset.\n\n\nFeatures\n\n\n\n\nsearching multiple fields\n\n\npagination\n\n\nset filtering operators\n\n\nset fixed filters\n\n\npass in lists as filters\n\n\n\n\nA quick example.\n\n\nLet's suppose we want to show a searchable list of actors.\n\n\nWe start with a django model in your \nmodels.py\n:\n\n\nclass Actor(models.Model):\n    name = models.CharField(max_length=32)\n    surname = models.CharField(max_length=32)\n    age = models.IntegerField()\n\n\n\n\nWe now build a regular django form for letting our users search our actors with various criteria:\nname \nor\n surname, the \nexact\n age, the \nminimun\n age and the \nmaximum\n age.\n\n\nfrom .models import Actor\nfrom django import forms\n\nclass ActorSearchForm(forms.Form):\n    search_text =  forms.CharField(\n        required = False,\n        label='Search name or surname!',\n        widget=forms.TextInput(attrs={'placeholder': 'search here!'})\n    )\n\n    search_age_exact = forms.IntegerField(\n        required = False,\n        label='Search age (exact match)!'\n    )\n\n    search_age_min = forms.IntegerField(\n        required = False,\n        label='Min age'\n    )\n\n    search_age_max = forms.IntegerField(\n      required = False,\n      label='Max age'\n    )\n\n\n\n\nNow, using \ndjango-search-views\n API we can:\n\n\n\n\ndefine the mapping between the form fields and the model fields, and the lookups\nused for searching model instances. This is done by writing a subclass of \nsearch_views.filters.BaseFilter\n\n\ndefine the actual view based on \nsearch_views.views.SearchListView\n class.\n\n\n\n\nfrom .models import Actor\nfrom .forms import ActorSearchForm\nfrom search_views.search import SearchListView\nfrom search_views.filters import BaseFilter\n\nclass ActorsFilter(BaseFilter):\n    search_fields = {\n        'search_text' : ['name', 'surname'],\n        'search_age_exact' : { 'operator' : '__exact', 'fields' : ['age'] },\n        'search_age_min' : { 'operator' : '__gte', 'fields' : ['age'] },\n        'search_age_max' : { 'operator' : '__lte', 'fields' : ['age'] },  \n    }\n\nclass ActorsSearchList(SearchListView):\n  # regular django.views.generic.list.ListView configuration\n  model = Actor\n  paginate_by = 30\n  template_name = \nactors/actors_list.html\n\n\n  # additional configuration for SearchListView\n  form_class = ActorSearchForm\n  filter_class = ActorsFilter\n\n\n\n\nSee all the details in the \nusage\n section.\n\n\nLicense and development\n\n\nThis project is MIT licensed and maintained by \nInmagik\n, suggestions and pull requests are welcome via the \nGithub project page\n.", 
            "title": "django-search-views"
        }, 
        {
            "location": "/#django-search-views", 
            "text": "This package provides a Django class-based view used for showing a list of objects with a search form.  Think of it as an extension of django's  django.views.generic.list.ListView  coupled with a  django form , where the values of the form build a filter on the base queryset.", 
            "title": "django-search-views"
        }, 
        {
            "location": "/#features", 
            "text": "searching multiple fields  pagination  set filtering operators  set fixed filters  pass in lists as filters", 
            "title": "Features"
        }, 
        {
            "location": "/#a-quick-example", 
            "text": "Let's suppose we want to show a searchable list of actors.  We start with a django model in your  models.py :  class Actor(models.Model):\n    name = models.CharField(max_length=32)\n    surname = models.CharField(max_length=32)\n    age = models.IntegerField()  We now build a regular django form for letting our users search our actors with various criteria:\nname  or  surname, the  exact  age, the  minimun  age and the  maximum  age.  from .models import Actor\nfrom django import forms\n\nclass ActorSearchForm(forms.Form):\n    search_text =  forms.CharField(\n        required = False,\n        label='Search name or surname!',\n        widget=forms.TextInput(attrs={'placeholder': 'search here!'})\n    )\n\n    search_age_exact = forms.IntegerField(\n        required = False,\n        label='Search age (exact match)!'\n    )\n\n    search_age_min = forms.IntegerField(\n        required = False,\n        label='Min age'\n    )\n\n    search_age_max = forms.IntegerField(\n      required = False,\n      label='Max age'\n    )  Now, using  django-search-views  API we can:   define the mapping between the form fields and the model fields, and the lookups\nused for searching model instances. This is done by writing a subclass of  search_views.filters.BaseFilter  define the actual view based on  search_views.views.SearchListView  class.   from .models import Actor\nfrom .forms import ActorSearchForm\nfrom search_views.search import SearchListView\nfrom search_views.filters import BaseFilter\n\nclass ActorsFilter(BaseFilter):\n    search_fields = {\n        'search_text' : ['name', 'surname'],\n        'search_age_exact' : { 'operator' : '__exact', 'fields' : ['age'] },\n        'search_age_min' : { 'operator' : '__gte', 'fields' : ['age'] },\n        'search_age_max' : { 'operator' : '__lte', 'fields' : ['age'] },  \n    }\n\nclass ActorsSearchList(SearchListView):\n  # regular django.views.generic.list.ListView configuration\n  model = Actor\n  paginate_by = 30\n  template_name =  actors/actors_list.html \n\n  # additional configuration for SearchListView\n  form_class = ActorSearchForm\n  filter_class = ActorsFilter  See all the details in the  usage  section.", 
            "title": "A quick example."
        }, 
        {
            "location": "/#license-and-development", 
            "text": "This project is MIT licensed and maintained by  Inmagik , suggestions and pull requests are welcome via the  Github project page .", 
            "title": "License and development"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nFrom pypi:\n\n\npip install django-search-views\n\n\n\n\nfrom source code:\n\n\npython setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "From pypi:  pip install django-search-views  from source code:  python setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage\n\n\nUsing \nsearch_views.views.SearchListView\n\n\nsearch_views.views.SearchListView\n is a class-based view derived from \ndjango.views.generic.list.ListView\n that you can inherit in your application's views to get the search functionalities.\n\n\nYour views, as a descendant of \ndjango.views.generic.list.ListView\n, must be configured by providing\n \ntemplate_name\n, a \nmodel\n or \nqueryset\n property or a \nget_queryset_method\n. See the related django docs for more details.\n\n\nYou will also need to define:\n\n\n\n\nthe \nform_class\n attribute, that specifies the class derived from \ndjango.forms.Form\n that will be used to get a form instance, that will available via the \nform\n context variable in your template.\n\n\nthe \nfilter_class\n attribute, that specifies the class derived from \nsearch_views.filters.BaseFilter\n used to map the form fields to the model properties and lookup methods.\n\n\n\n\nHere's an example definition of a view:\n\n\nfrom .models import Actor\nfrom .forms import ActorSearchForm\nfrom search_views.search import SearchListView\n\nclass ActorsSearchList(SearchListView):\n    # regular django.views.generic.list.ListView configuration\n    model = Actor\n    paginate_by = 30\n    template_name = \nactors/actors_list.html\n\n\n    # additional configuration for SearchListView\n    form_class = ActorSearchForm\n    filter_class = ActorsFilter\n\n\n\n\nThe \nfilter_class\n is resposible of mapping the fields defined in your form to\n\nfilter that will be performed on the base queryset. This is done by providing a subclass\nof \nsearch_views.filters.BaseFilter\n.\n\n\nclass \nsearch_views.filters.BaseFilter\n\n\nThis class is used to configure the main view class, by means of its \nsearch_fields\n attribute,\nthat must be set to a python dictionary, where:\n\n\n\n\nkeys\n map to the fields of your form class.\n\n\nvalues\n are either:\n\n\na list of field names of your model. In this case a simple text search is performed.\n\n\n\n\na configuration dictionary that specifies\n\n\n\n\nfields\n: list of fields name to apply the filter to\n\n\n\n\noperator\n: django queryset operator that is used to apply the filter.\n\n\n\n\n\n\nfixed_filters\n:  TBW\n\n\n\n\ncustom_query\n: TBW\n\n\nvalue_mapper\n: TBW\n\n\n\n\n\n\n\n\n\n\n\n\nQueries generated by different search_fields are ANDed,\nif a search field is defined for more than one field, are put together with OR.\n\n\nLet's explore all the options. (TBW)\n\n\nfrom .models import Actor\nfrom .forms import ActorSearchForm\nfrom search_views.search import SearchListView\nfrom search_views.filters import BaseFilter\n\nclass ActorsFilter(BaseFilter):\n    search_fields = {\n        'search_text' : ['name', 'surname'],\n        'search_age_exact' : { 'operator' : '__exact', 'fields' : ['age'] },\n        'search_age_min' : { 'operator' : '__gte', 'fields' : ['age'] },\n        'search_age_max' : { 'operator' : '__lte', 'fields' : ['age'] },  \n    }\n\nclass ActorsSearchList(SearchListView):\n    model = Actor\n    paginate_by = 30\n    template_name = \nactors/actors_list.html\n\n    form_class = ActorSearchForm\n    filter_class = ActorsFilter", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#using-search_viewsviewssearchlistview", 
            "text": "search_views.views.SearchListView  is a class-based view derived from  django.views.generic.list.ListView  that you can inherit in your application's views to get the search functionalities.  Your views, as a descendant of  django.views.generic.list.ListView , must be configured by providing\n  template_name , a  model  or  queryset  property or a  get_queryset_method . See the related django docs for more details.  You will also need to define:   the  form_class  attribute, that specifies the class derived from  django.forms.Form  that will be used to get a form instance, that will available via the  form  context variable in your template.  the  filter_class  attribute, that specifies the class derived from  search_views.filters.BaseFilter  used to map the form fields to the model properties and lookup methods.   Here's an example definition of a view:  from .models import Actor\nfrom .forms import ActorSearchForm\nfrom search_views.search import SearchListView\n\nclass ActorsSearchList(SearchListView):\n    # regular django.views.generic.list.ListView configuration\n    model = Actor\n    paginate_by = 30\n    template_name =  actors/actors_list.html \n\n    # additional configuration for SearchListView\n    form_class = ActorSearchForm\n    filter_class = ActorsFilter  The  filter_class  is resposible of mapping the fields defined in your form to \nfilter that will be performed on the base queryset. This is done by providing a subclass\nof  search_views.filters.BaseFilter .", 
            "title": "Using search_views.views.SearchListView"
        }, 
        {
            "location": "/usage/#class-search_viewsfiltersbasefilter", 
            "text": "This class is used to configure the main view class, by means of its  search_fields  attribute,\nthat must be set to a python dictionary, where:   keys  map to the fields of your form class.  values  are either:  a list of field names of your model. In this case a simple text search is performed.   a configuration dictionary that specifies   fields : list of fields name to apply the filter to   operator : django queryset operator that is used to apply the filter.    fixed_filters :  TBW   custom_query : TBW  value_mapper : TBW       Queries generated by different search_fields are ANDed,\nif a search field is defined for more than one field, are put together with OR.  Let's explore all the options. (TBW)  from .models import Actor\nfrom .forms import ActorSearchForm\nfrom search_views.search import SearchListView\nfrom search_views.filters import BaseFilter\n\nclass ActorsFilter(BaseFilter):\n    search_fields = {\n        'search_text' : ['name', 'surname'],\n        'search_age_exact' : { 'operator' : '__exact', 'fields' : ['age'] },\n        'search_age_min' : { 'operator' : '__gte', 'fields' : ['age'] },\n        'search_age_max' : { 'operator' : '__lte', 'fields' : ['age'] },  \n    }\n\nclass ActorsSearchList(SearchListView):\n    model = Actor\n    paginate_by = 30\n    template_name =  actors/actors_list.html \n    form_class = ActorSearchForm\n    filter_class = ActorsFilter", 
            "title": "class search_views.filters.BaseFilter"
        }, 
        {
            "location": "/changelog/", 
            "text": "Changelog\n\n\n0.2.0\n\n\n\n\nfilters are now configured in their own class derived from \nsearch_views.filters.BaseFilter\n.\n\n\n\n\n0.3.0\n\n\n\n\nRenamed main package from \nsearchlist_views\n to \nsearch_views\n.\n\n\n\n\n0.3.1\n\n\n\n\nPython 3 compatibility", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#020", 
            "text": "filters are now configured in their own class derived from  search_views.filters.BaseFilter .", 
            "title": "0.2.0"
        }, 
        {
            "location": "/changelog/#030", 
            "text": "Renamed main package from  searchlist_views  to  search_views .", 
            "title": "0.3.0"
        }, 
        {
            "location": "/changelog/#031", 
            "text": "Python 3 compatibility", 
            "title": "0.3.1"
        }
    ]
}